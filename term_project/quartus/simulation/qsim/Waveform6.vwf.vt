// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2021 20:57:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decimal_to_alphabet
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decimal_to_alphabet_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg eight;
reg five;
reg four;
reg nine;
reg one;
reg rst;
reg seven;
reg sharp;
reg six;
reg three;
reg two;
reg zero;
// wires                                               
wire [7:0] alphabet;
wire [7:0] pin_name1;
wire [7:0] pin_name2;
wire [7:0] pin_name3;
wire [7:0] pin_name4;

// assign statements (if any)                          
decimal_to_alphabet i1 (
// port map - connection between master ports and signals/registers   
	.alphabet(alphabet),
	.clk(clk),
	.eight(eight),
	.five(five),
	.four(four),
	.nine(nine),
	.one(one),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.rst(rst),
	.seven(seven),
	.sharp(sharp),
	.six(six),
	.three(three),
	.two(two),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// one
initial
begin
	one = 1'b0;
	one = #10000 1'b1;
	one = #40000 1'b0;
	one = #50000 1'b1;
	one = #30000 1'b0;
	one = #370000 1'b1;
	one = #60000 1'b0;
	one = #20000 1'b1;
	one = #60000 1'b0;
	one = #20000 1'b1;
	one = #60000 1'b0;
	one = #20000 1'b1;
	one = #60000 1'b0;
end 

// two
initial
begin
	two = 1'b0;
	two = #50000 1'b1;
	two = #40000 1'b0;
end 

// three
initial
begin
	three = 1'b0;
end 

// four
initial
begin
	four = 1'b0;
	four = #140000 1'b1;
	four = #50000 1'b0;
end 

// five
initial
begin
	five = 1'b0;
	five = #190000 1'b1;
	five = #40000 1'b0;
end 

// six
initial
begin
	six = 1'b0;
	six = #230000 1'b1;
	six = #40000 1'b0;
end 

// seven
initial
begin
	seven = 1'b0;
	seven = #280000 1'b1;
	seven = #60000 1'b0;
end 

// eight
initial
begin
	eight = 1'b0;
	eight = #370000 1'b1;
	eight = #40000 1'b0;
end 

// nine
initial
begin
	nine = 1'b0;
	nine = #440000 1'b1;
	nine = #50000 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #440000 1'b1;
	zero = #50000 1'b0;
end 

// sharp
initial
begin
	sharp = 1'b0;
end 
endmodule

