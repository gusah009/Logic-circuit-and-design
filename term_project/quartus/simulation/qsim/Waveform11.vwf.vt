// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/19/2021 17:01:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RAM_5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] CE_in;
reg [2:0] CE_out;
reg clk;
reg [7:0] Din;
reg reg_ce;
reg rst;
// wires                                               
wire [7:0] RAM_OUT;
wire [7:0] reg_out1;
wire [7:0] reg_out2;
wire [7:0] reg_out3;
wire [7:0] reg_out4;
wire [7:0] reg_out5;

// assign statements (if any)                          
RAM_5 i1 (
// port map - connection between master ports and signals/registers   
	.CE_in(CE_in),
	.CE_out(CE_out),
	.clk(clk),
	.Din(Din),
	.RAM_OUT(RAM_OUT),
	.reg_ce(reg_ce),
	.reg_out1(reg_out1),
	.reg_out2(reg_out2),
	.reg_out3(reg_out3),
	.reg_out4(reg_out4),
	.reg_out5(reg_out5),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 
// CE_in[ 2 ]
initial
begin
	CE_in[2] = 1'b0;
	CE_in[2] = #20000 1'b1;
	CE_in[2] = #40000 1'b0;
end 
// CE_in[ 1 ]
initial
begin
	CE_in[1] = 1'b0;
	CE_in[1] = #60000 1'b1;
	CE_in[1] = #40000 1'b0;
	CE_in[1] = #40000 1'b1;
	CE_in[1] = #40000 1'b0;
end 
// CE_in[ 0 ]
initial
begin
	CE_in[0] = 1'b0;
	CE_in[0] = #100000 1'b1;
	CE_in[0] = #80000 1'b0;
end 
// CE_out[ 2 ]
initial
begin
	CE_out[2] = 1'b0;
	CE_out[2] = #220000 1'b1;
	CE_out[2] = #40000 1'b0;
end 
// CE_out[ 1 ]
initial
begin
	CE_out[1] = 1'b0;
	CE_out[1] = #260000 1'b1;
	CE_out[1] = #80000 1'b0;
end 
// CE_out[ 0 ]
initial
begin
	CE_out[0] = 1'b0;
	CE_out[0] = #260000 1'b1;
	CE_out[0] = #40000 1'b0;
	CE_out[0] = #40000 1'b1;
	CE_out[0] = #40000 1'b0;
end 

// clk
initial
begin
	clk = 1'b1;
	# 20000;
	repeat(24)
	begin
		clk = 1'b0;
		clk = #20000 1'b1;
		# 20000;
	end
	clk = 1'b0;
end 
// Din[ 7 ]
initial
begin
	Din[7] = 1'b0;
	Din[7] = #20000 1'b1;
	Din[7] = #40000 1'b0;
end 
// Din[ 6 ]
initial
begin
	Din[6] = 1'b0;
	Din[6] = #20000 1'b1;
	Din[6] = #40000 1'b0;
	Din[6] = #80000 1'b1;
	Din[6] = #40000 1'b0;
end 
// Din[ 5 ]
initial
begin
	Din[5] = 1'b0;
	Din[5] = #60000 1'b1;
	Din[5] = #40000 1'b0;
	Din[5] = #40000 1'b1;
	Din[5] = #40000 1'b0;
end 
// Din[ 4 ]
initial
begin
	Din[4] = 1'b0;
	Din[4] = #60000 1'b1;
	Din[4] = #80000 1'b0;
end 
// Din[ 3 ]
initial
begin
	Din[3] = 1'b0;
	Din[3] = #100000 1'b1;
	Din[3] = #40000 1'b0;
end 
// Din[ 2 ]
initial
begin
	Din[2] = 1'b0;
end 
// Din[ 1 ]
initial
begin
	Din[1] = 1'b0;
end 
// Din[ 0 ]
initial
begin
	Din[0] = 1'b0;
end 

// reg_ce
initial
begin
	reg_ce = 1'b0;
	reg_ce = #20000 1'b1;
	reg_ce = #160000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

